//My submission:

public char findKthBit(int n, int k) {
        if (n == 1) return '0';

        int[] dp = new int[n + 1];
        dp[1] = 1;
        for (int i = 2 ; i <= n; i++) {
            dp[i] = 2 * dp[i-1] + 1;
        }

        if (k == dp[n] / 2 + 1) return '1';

        return solve(false, n, k, dp);
    }

    public char solve(boolean isReverse, int n, int k, int[] dp) {
        if (n == 1 || k == 1) return (isReverse) ? '1'  : '0';
        if (k == (dp[n] / 2) + 1) return (isReverse) ? '0' : '1';

        char res = '0';
        if (k < dp[n] / 2 + 1) {
            res = solve(false, n-1, k, dp);
        } else {
            res = solve(true, n-1, dp[n] + 1-k, dp);
        }
        if (isReverse) {
            if (res == '1') {
                res = '0';
            } else {
                res = '1';
            }
        }

        return res;
    }


//a better solution
 public char findKthBit(int n, int k) {
        // Base case: When n = 1, the binary string is "0"
        if (n == 1) return '0';
        
        // Find the length of the current string Sn, which is 2^n - 1
        int length = (1 << n) - 1;
        
        // Find the middle position
        int mid = length / 2 + 1;
        
        // If k is the middle position, return '1'
        if (k == mid) return '1';
        
        // If k is in the first half, find the bit in Sn-1
        if (k < mid) return findKthBit(n - 1, k);
        
        // If k is in the second half, find the bit in Sn-1 and invert it
        return findKthBit(n - 1, length - k + 1) == '0' ? '1' : '0';
    }
